class Solution:
    def divide_conquer(self, root):
        if root is None:
            return 0, 0, 0
        left_decre, left_incre, maxleft = self.divide_conquer(root.left)
        right_decre, right_incre, maxright = self.divide_conquer(root.right)
        decre, incre = 0, 0
        if root.left and root.left.val + 1 == root.val:
            decre = max(decre, left_decre + 1)
        elif root.left and root.left.val - 1 == root.val:
            incre = max(incre, left_incre + 1)
        if root.right and root.right.val + 1 == root.val:
            decre = max(decre, right_decre + 1)
        elif root.right and root.right.val - 1 == root.val:
            incre = max(incre, right_incre + 1)
        res = incre + decre + 1
        maxres = max(res, maxleft, maxright)
        return decre, incre, maxres
        
    """
    @param root: the root of binary tree
    @return: the length of the longest consecutive sequence path
    """
    def longestConsecutive2(self, root):
        # write your code here
        a, b, c = self.divide_conquer(root)
        return c
