class Node:
    def __init__(self, id, num):
        self.id, self.num = id, num
        
class HashHeap:
    def __init__(self):
        self.min_heap, self.hashmap, self.currentsize = [], dict(), 0
        
    def push(self, value):
        if value in self.hashmap.keys():
            self.hashmap[value].num += 1
        else:
            self.min_heap.append(value)
            self.hashmap[value] = Node(len(self.min_heap)-1, 1)
            self.sift_up(len(self.min_heap)-1)
        self.currentsize += 1
        
    def pop(self):
        if self.currentsize > 0:
            result = self.min_heap[0]
            if self.hashmap[result].num > 1:
                self.hashmap[result].num -= 1
            else:
                if self.hashmap[result].id == len(self.min_heap)-1:
                    self.min_heap.pop()
                    del self.hashmap[result]
                else:
                    last_id, result_id = self.hashmap[self.min_heap[-1]].id, self.hashmap[result].id
                    self.hashmap[self.min_heap[-1]].id, self.hashmap[result].id = result_id, last_id
                    self.min_heap[last_id], self.min_heap[result_id] = self.min_heap[result_id], self.min_heap[last_id]
                    self.min_heap.pop()
                    del self.hashmap[result]
                    self.sift_down(result_id)
            self.currentsize -= 1
            return result
            
    def peek(self):
        return self.min_heap[0]
        
    def delete(self, value):
        if value in self.hashmap.keys():
            if self.hashmap[value].num > 1:
                self.hashmap[value].num -= 1
            else:
                if self.hashmap[value].id == len(self.min_heap)-1:
                    del self.hashmap[value]
                    self.min_heap.pop()
                else:
                    last_id, value_id = self.hashmap[self.min_heap[-1]].id, self.hashmap[value].id
                    self.hashmap[self.min_heap[-1]].id, self.hashmap[value].id = value_id, last_id
                    self.min_heap[value_id], self.min_heap[last_id] = self.min_heap[last_id], self.min_heap[value_id]
                    del self.hashmap[value]
                    self.min_heap.pop()
                    self.sift_up(value_id)
                    self.sift_down(value_id)
            self.currentsize -= 1
                    
    def is_empty(self):
        return self.currentsize == 0
        
    def get_size(self):
        return self.currentsize
                    
    def sift_up(self, idx):
        while idx != 0 and self.min_heap[int((idx-1)/2)] > self.min_heap[idx]:
            self.hashmap[self.min_heap[idx]].id, self.hashmap[self.min_heap[int((idx-1)/2)]].id = self.hashmap[self.min_heap[int((idx-1)/2)]].id, self.hashmap[self.min_heap[idx]].id
            self.min_heap[idx], self.min_heap[int((idx-1)/2)] = self.min_heap[int((idx-1)/2)], self.min_heap[idx]
            idx = int((idx-1)/2)
            
    def sift_down(self, idx):
        left_id, right_id, min_id = 2*idx+1, 2*idx+2, idx
        while idx < len(self.min_heap):
            if left_id < len(self.min_heap) and self.min_heap[left_id] < self.min_heap[idx]:
                min_id = left_id
            if right_id < len(self.min_heap) and self.min_heap[right_id] < self.min_heap[min_id]:
                min_id = right_id
            if min_id == idx:
                break
            self.hashmap[self.min_heap[idx]].id, self.hashmap[self.min_heap[min_id]].id = self.hashmap[self.min_heap[min_id]].id, self.hashmap[self.min_heap[idx]].id
            self.min_heap[idx], self.min_heap[min_id] = self.min_heap[min_id], self.min_heap[idx]
            idx = min_id
            left_id, right_id = 2*idx+1, 2*idx+2
