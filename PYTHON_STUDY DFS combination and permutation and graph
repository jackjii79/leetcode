1 problem find missing number:
Giving a string with number from 1-n in random order, but miss 1 number.Find that number.
def dfs(self, n, str, result, visit_set, count):
        if len(str) == 0 and count == n-1:
            return result
        
        elif count < n - 1:
            for i in range(len(str)):
                if int(str[:i+1]) >= 1 and int(str[:i+1]) <= n and int(str[:i+1]) not in visit_set and str[0] != '0':
                    visit_set.add(int(str[:i+1]))
                    res = self.dfs(n, str[i+1:], result - int(str[:i+1]), visit_set, count+1)
                    if res != None:
                        return res
                    visit_set.remove(int(str[:i+1]))
                    
        return None
            
    """
    @param n: An integer
    @param str: a string with number from 1-n in random order and miss one number
    @return: An integer
    """
    def findMissing2(self, n, str):
        # write your code here
        result = sum(range(1,n+1))
        return self.dfs(n, str, result, set(), 0)

2 problem palindrome partition II:
idea: idea : using two dp method to optimize !

def minCut(self, s):
        # write your code here
        #first DP table to store if substring is palindrome
        dp_table = [[True for j in range(len(s))] for i in range(len(s))]
        for l in range(2, len(s)+1):
            for i in range(len(s)-l+1):
                j = i + l - 1
                if s[i] == s[j] and dp_table[i+1][j-1] == True:
                    dp_table[i][j] = True
                else:
                    dp_table[i][j] = False
        #second dp table to store the minimum cut of substring
        result = [0 for i in range(len(s))]
        for i in range(1, len(s)):
            if dp_table[0][i] == False: #if is palindrome, cut remains zero
                result[i] = math.inf
                for j in range(1, i+1):
                    if dp_table[j][i] == True: #since j->i is palindrome, result is cut from 0 to j-1 plus 1 !!
                        result[i] = min(result[i], result[j-1] + 1)
                    
        return result[-1]
