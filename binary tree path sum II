class Solution:
    def __init__(self):
        self.result = []
    
    def traversal(self, root, target, path):
        if root is not None:
            sumpath = root.val
            
            if sumpath == target:
                self.result.append([root.val])
                
            for idx in range(len(path)-1, -1, -1):
                sumpath += path[idx]
                if sumpath == target:
                    self.result.append(path[idx:]+[root.val])
                    
            self.traversal(root.left, target, path+[root.val])
            self.traversal(root.right, target, path+[root.val])
            
        return
    
    """
    @param: root: the root of binary tree
    @param: target: An integer
    @return: all valid paths
    """
    def binaryTreePathSum2(self, root, target):
        # write your code here
        self.traversal(root, target, [])
        return self.result
