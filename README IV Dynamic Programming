Important elements of DP:
Substructure optimal:
1) determine the number of subproblems
how many space do we need to store dp solution of subproblems

2) determine how many choices do we have to make in subproblems in order to get optimal result
what is the relation function between subproblem and optimal result

3) check if each subproblem is independent of each other
if not like longgest path, then we cannot use DP

4) Prove if substructure optimal is correct (prove contradiction)
make sure this is a substrcture optimal 

Overlap subproblems:
1) If the subproblem is overlap in the recursive tree, if so then we can use DP to solve repeated problems
(divide and conquer do not have repeated sub problems in recursive tree)
we can either use memorization in top-down or bottom-up

Improvement:
If we use top-down, we should seek opportunity to optimize the storage space we use to store DP result
ex:
if dp[i,j] = dp[i-1,j-1]+1, if a[i] == b[j];
   dp[i,j] = max(dp[i-1,j],dp[i,j-1]), if a[i] != b[j]
   for i,j in 1..m, 1..n
  Here, all we need is result from last row, thus we can reduce from dp[m][n] to dp[2][n]
  
 normally, only outermost rows can be space optimized using % to cut from n to a constant number of rows depending on relation
 formula !!!(dp[i] = sth with dp[i-1] means result only rely on last row, thus we only need 2 rows !)
 Only the outermost row of loop can be used to space optimization !!(for i in... for j in .. where i is the outermost which has
 the potential to space optimization)
  
Initialization:
like dp[i]= sth with dp[i-1] we probably should start from 0 and let dp[0] be 0, depending on the form of dp relation function

Note:Always start thinking about backtracking in top-down fashion and use memorization to reduce running time complexity

Types of DP problem:
1) problem from small to big sequentially
dp[n] = sth with dp[n-1]

2) problem involving length of intervals
dp[0,n] = sth with dp[1,n] or dp[0,n-1]
alternatively,
dp[j] = sth with dp[i] where 0 <= i < j
Our final result will resides in dp[0][n]

Specialy Attention: Such intervals type of DP problem, if we use bottom-up strategy then we cannot optimize space storage by using
2 lines even if we have the form dp[i][j] = sth with dp[i+1][j] and dp[i][j-1] since our line i is in a inner loop instead of a
outermost loop. Which means if line ith is in a outermost loop then we can use dp[i%2] to reduce space by using 2 lines !!!

3) continuous DP problem:
Related problems: maximum product of continuous subarray/maximum sum of continuous subarray/longest increasing/decreasing 
continuous subarray/maximal square/maximum rectange

Such problems have a common feature that all adjacent cells have to be in a row into the solution, which means we cannot
consider the case that dp[i] = dp[i-1] that do not make a choice because such arrangement will make next choice become 
non-continuous ! Thus, eachtime our subproblem solution have to be the one that including current cell !
Which means the last subproblem is not necessarily be our final solution(max/min), we have to use an auxiliary variable to
store our best result whenever we come up with a solution of each subproblem and the result of our auxiliary variable will be
our final result ! like, result = max(result, dp[i]) each time we got dp[i]

To maximal square problem in matrix, we can construct a up and left array to count the number of 1s or 0s on up and left directions
respectively, and let the matrix of up/left directions matrix help us to decide whether there is a square from the right down
point as our starting point

To longest increasing/decreasing problem, even though the result has not to be a continuous subarray, this is still a continus
DP problem because we let current element in the array comparing with all previous elements, this type of problem we described
as "looking back DP problem" and still the last dp result is not necessarily the optimal result; However, on the country, to 
continuous increasing/decreasing problem, we do not need to look back since requirements have to be continuous,all we need to
do is to compare with the previous one 
dp[i] = max(dp[i-1]+1,dp[i]) if input[i] > or < input[i-1]

4) counterpart DP problem(博弈DP):
drop a coin I/II/III: we consider the state of first player and we start to build DP from the last state to the initial state
to come up the result whether or not we can win(从结果到起始状态倒退)
ex: a player can either choose one or two coins from left to right, we start from the last state there the last one/two/three/.. 
coin, dp[1] = coin[-1]; dp[2] = coin[-1] + coin[-2]; dp[3] = max(sum(coin[-3:])-dp[3-2],sum(coin[-3:])-dp[3-1]) which means
when there are three coins left, after we pick up there are either one coin left or two coins left case, we find the maximum
value we can get among those two cases !
Another example is two players can either pick up one/two coins from leftmost or rightmost, then we have four cases :
dp[i][j] is defined as the maximum amount of values we can get from i to j coins:
dp[i][j] = max(sum(coin[i:j+1])-dp[i+1][j](we pick the leftmost one coin),sum(coin[i:j+1])-dp[i][j-1](we pick the rightmost one
coin),sum(coin[i:j+1])-dp[i+2][j](we pick the leftmost two coins),sum(coin[i:j+1])-dp[i][j-2](we pick the rightmost two coin)

Notice: If we have to judge which one player can win, we just let our result compare with half of the sum

5) Comparative DP problem(匹配/比较DP）：
finding the longest common subsequence/longest repeating subsequence/edit distance
we let dp[i][j] defined as the first string with length i and the second string with length j that we have compared 
The most important thing of such comparative DP problem is we have two strings to compare with,both starting from 0 position and
end with m and n respectively which is their origin length . 

6) Backpack DP problem(背包问题):
we can use a value/target as a column/row dimension into our DP solution space
0-1 backpack problem: we can only choose one item each time which means we can never look back
for i in range(len(nums)):
 for k in range(target,0,-1): #we start from the biggest target,which will let each element in the nums list only be chosen once
  dp[i][k] = max(dp[i-1][k],dp[i-1][k-nums[i]] + nums[i]) or
  dp[k] += dp[k-nums[i]]
  
complete-backpack problem: we can choose one item multiple times 
for i in range(len(nums)):
 for k in range(target+1): #we start from the smallest target,which will let each element chosen multiple times
  dp[k] += dp[k-nums[i]]
  
 number of combinations with target sum and each item can be chosen multiple times:
 ex:2 1 4 7 target is 7, if first element of combination seq is 7, then we found dp[0] in the rest, if first element of 
 combination seq is 1,then we found dp[6], if first element of seq is 2, then we found dp[5],etc
 dp[x] = sum(dp[x-nums[i]] where nums[i] <= x)
 for t in range(target+1):
  for x in range(len(nums)):
   dp[t] += dp[t-nums[x]]
   
 0-1 backpack problem:k sum
 for i in range(len(nums)):
  for j in range(target,0,-1):
   for x in range(k+1):
    dp[j][x] += dp[j-nums[i]][x-1]
    
 minimal adjustment cost: we let value be column dimension in DP solution space
 dp_solution[i][v] the minimal cost that we set ith element be value v
 dp_solution[i][v] = min(dp_solution[i-1][v'] + abs(nums[i]-v)) where abs(v'-v) <= target, v and v' can be any integer
 from 1 to 100
 our result is the minimal cost for dp_solution[N][v] where v is from 1 to 100 because our result is depends on the v' obtained
 from (i-1)th element, which means we need to permutate all possible values of v from 1 to 100 to find the minimal one as v

Dependent DP problem: current round solution depends on last round choice
similar problems: paint house/maximum product subarray/minimum adjustment cost
The common feature of this type of problem is that the solution at m round is depdends on our choice at m-1 round
in maximum product subarray problem, given array 3 5 7 we have the maximum product be 3*5*7 and 3 5 7 -3 we have the maximum 
product be 3*5*7, however given 3 5 7 -3 -2 we have 3*5*7*-3*-2 which is different from last round result. similar to paint
house problem.

Therefore, to solve such problem, we simply permutate all possible choices and store in array to memorize those results
in maximum product problem, we have max_product array and min_product array to store the maximum product subarray and the minimum
product subarray, respectively. Our formula would be max_product[i] = max(num*max_product[i-1],num,num*min_product[i-1]) and
min_product[i] = min(num*min_product[i-1],num,num*max_product[i-1])

Similarly, to paint house problem, we store all three possible choices as:
dp_solution[m][0](when we choose o color) += min(dp_solution[m-1][1],dp_solution[m-1][2]); dp_solution[m][1] += min(dp_solution
[m-1][0],dp_solution[m-1][2]); dp_solution[m][2] += min(dp_solution[m-1][0],dp_solution[m-1][1])

to paint house ii problem, we do not have to the minimum for each k choices, instead we just need to find the minimum choice
and the secondary minimum choice over all k choices since as long as the minimum/secondary choice of last round is not equal
to our current k choice, which would be ok !!!

Optimization tips:
1) think about forward algo and backward algo combined together may optimize running time !
2) think about prefix sum may be used to reduce running time
3) think about maybe we do not need to find the max/min for every sets that contain lots of members in common, instead we just need
to find the best one and the secondary best one ?

Maximum subarray III:
二、划分型动规解法

对方法一进行思考，其实仍然可以进行优化。对于 f[i][j] = max{f[m][j - 1] + maxSubArray(m + 1, i)}, j - 1 <= m < i ，每当新增一个元素的时候，之前的最大值仍是最大值，但是需要和新加进来的元素进行对比，所以只需要把之前遍历得到的结果用一个变量存储起来，就无需反复遍历了。

    定义状态：
        定义 localMax[i][j]，表示前 i 个数字，取 j 个划分时，包含第 i 个数字的最大和。
        定义 globalMax[i][j]，表示前 i 个数字，取 j 个划分时，可以不包含第 i 个数字的最大和。
    定义状态转移函数：
        对 localMax[i][j]，由于一定包含第 i 个数字，那么有两种情况，
            第 i 个数字属于第 j 个子数组，对应 localMax[i - 1][j] + nums[i - 1]；
            第 i 个数字不属于第 j 个子数组，对应 localMax[i - 1][j - 1] + nums[i - 1]；
            比较两者取最大值皆可。
        对 globalMax[i][j]，比较 localMax[i][j] 和 globalMax[i - 1][j] 中的最大值即可。
    定义起点：
        对 localMax[i][j]，在处理时会出现 localMax[i - 1][i]，根据逻辑此种情况不存在，由于涉及取最大值操作，所以初始化为 Integer.MIN_VALUE。
    定义终点：最终结果即为 globalMax[n][k]。

