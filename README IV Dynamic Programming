Important elements of DP:
Substructure optimal:
1) determine the number of subproblems
how many space do we need to store dp solution of subproblems

2) determine how many choices do we have to make in subproblems in order to get optimal result
what is the relation function between subproblem and optimal result

3) check if each subproblem is independent of each other
if not like longgest path, then we cannot use DP

4) Prove if substructure optimal is correct (prove contradiction)
make sure this is a substrcture optimal 

Overlap subproblems:
1) If the subproblem is overlap in the recursive tree, if so then we can use DP to solve repeated problems
(divide and conquer do not have repeated sub problems in recursive tree)
we can either use memorization in top-down or bottom-up

Improvement:
If we use top-down, we should seek opportunity to optimize the storage space we use to store DP result
ex:
if dp[i,j] = dp[i-1,j-1]+1, if a[i] == b[j];
   dp[i,j] = max(dp[i-1,j],dp[i,j-1]), if a[i] != b[j]
   for i,j in 1..m, 1..n
  Here, all we need is result from last row, thus we can reduce from dp[m][n] to dp[2][n]
  
Initialization:
like dp[i]= sth with dp[i-1] we probably should start from 0 and let dp[0] be 0, depending on the form of dp relation function

Note:Always start thinking about backtracking in top-down fashion and use memorization to reduce running time complexity

Types of DP problem:
1) problem from small to big sequentially
dp[n] = sth with dp[n-1]

2) problem involving length of intervals
dp[0,n] = sth with dp[1,n] or dp[0,n-1]
alternatively,
dp[j] = sth with dp[i] where 0 <= i < j
Our final result will resides in dp[0][n]

Specialy Attention: Such intervals type of DP problem, if we use bottom-up strategy then we cannot optimize space storage by using
2 lines even if we have the form dp[i][j] = sth with dp[i+1][j] and dp[i][j-1] since our line i is in a inner loop instead of a
outermost loop. Which means if line ith is in a outermost loop then we can use dp[i%2] to reduce space by using 2 lines !!!

3) continuous DP problem:
ex: maximum sum of continuous subarray/longest increasing/decreasing continuous subarray/maximal square/maximum rectange
Such problems have a common feature that all adjacent cells have to be in a row into the solution, which means we cannot
consider the case that dp[i] = dp[i-1] that do not make a choice because such arrangement will make next choice become 
non-continuous ! Thus, eachtime our subproblem solution have to be the one that including current cell !
Which means the last subproblem is not necessarily be our final solution(max/min), we have to use an auxiliary variable to
store our best result whenever we come up with a solution of each subproblem and the result of our auxiliary variable will be
our final result ! like, result = max(result, dp[i]) each time we got dp[i]
