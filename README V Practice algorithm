Matrix power (pow(A,n) where A is a matrix)application problem
1 get ith fibonacci value in O(lgn) time, the idea can be extend to problem fast power !
sample code:
Matrix power(int n) {
        Matrix ret = new Matrix(row, col, 1);
        Matrix matrix = new Matrix(this);
        while (n > 0) {
            if (n % 2 == 1) {
                ret = ret.multiply(matrix);
            }
            n = n / 2;
            matrix = matrix.multiply(matrix);
        }
        return ret;
    }
    
    
Partition & quick select sample code:
form I:
def partition(self, array, st, end):
        i, j, key = st, st+1, array[st]
        for j in range(st+1,end+1):
            if key > array[j]:
                i += 1
                array[i], array[j] = array[j], array[i]
        array[i], array[st] = array[st], array[i]
        return i
        
    def quick_select(self, array, st, end, k):
        if end >= st:
            pivot = self.partition(array, st, end)
            if pivot == k:
                return
            elif pivot > k:
                return self.quick_select(array, st, pivot-1, k)
            else:
                return self.quick_select(array, pivot+1, end, k)
        else:
            return
form II:
def find_pivot(self, nums, st, end):
        key, i = nums[st], st
        for j in range(i+1, end+1):
            if key < nums[j]:
                i += 1
                nums[i], nums[j] = nums[j], nums[i]
        nums[st], nums[i] = nums[i], nums[st]
        return i - st
        
    def quick_select(self, nums, st, end, k):
        if end > st:
            pivot = self.find_pivot(nums, st, end)
            if pivot == k:
                return
            elif pivot < k:
                return self.quick_select(nums, st + pivot + 1, end, k - pivot - 1)
            else:
                return self.quick_select(nums, st, st + pivot - 1, k)

prime factorization:
result, i = [], 2
        while i * i <= num:
            while not num % i:
                num = int(num/i)
                result.append(i)
            i += 1
            
        if num != 1:
            result.append(num)
        return result
